

void rotateSelection(cell* curCell, rect selection, point center, string direction) {
    curCell->deselectAll();
    curCell->fAllSelect(selection);
    layout->drawing->point(center.x(), center.y());
    if (direction=="d") {}
    else if (direction=="u") {
        layout->drawing->rotate(180);  
        layout->drawing->clearPoints();
        layout->drawing->point(center.x(), center.y());
        layout->drawing->point(center.x(), center.y()+100e3);     
        layout->drawing->mirror();
    }
    else if (direction=="l") layout->drawing->rotate(-90);
    else if (direction=="r") layout->drawing->rotate(90);
    curCell->deselectAll();
    layout->drawing->clearPoints();
}

string opposite(string direction) {
    if (direction=="d") return "u";
    else if (direction=="u") return "d";
    else if (direction=="l") return "r";
    else if (direction=="r") return "l";
}

point copyPoint(point p) {

    point cp;
    cp.set(p.x(), p.y());
    return cp;
}

string roman(int i){
    int k;
    string ret="";
    
    if (i<4){
        for(k=0;k<i;k++)
            ret+="I";
        return ret;
    } else if(i==4) 
        return "IV";
    else if(i==5) 
        return "V";
    else if(i<9) {
        ret += "V";
        return ret+roman(i-5);
    } else if(i==9) 
        return "IX";
    else if(i==10) 
        return "X";
}
