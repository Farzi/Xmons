#!/usr/bin/layout
#name=XMon resonators
#help=Creates XMon resonator design

#include "wiring.layout"
#include "auxx.layout"
#include "layersSetup.layout"
#include "resonator.layout"
#include "feedline.layout"
#include "claw.layout"
#include "Xmon.layout"


        int M = 0;
        int protect = 1;
        int ground = 2;
        int mask = 3;
        int total = 4;
        
        int w_res =8e3;
        int g_res = 4e3;
        int x = 5e3;
        int tailLen = 750e3;
        
        int w_feed = 16e3;
        int g_feed = 8e3;
        
        int chip_height = 5e6;
        int chip_width = 10e6;
        int feedlineDepth = chip_height/6;

        int w_q = 20e3;
        int g_q = 20e3;

int main() {
    setupLayers();
    layout->drawing->selectAll();
    layout->drawing->deleteSelect();
    layout->drawing->deselectAll();

        
        int i;
    
    cell *curCell = layout->drawing->currentCell;
    point cursor;
    
    intList segmentLengths;
    stringList directions;
    directions.append("r");    directions.append("d");    
    directions.append("r");   directions.append("u");
    directions.append("r");
    
    segmentLengths.append(chip_width/10);     segmentLengths.append(feedlineDepth);
    segmentLengths.append(4*chip_width/5);    segmentLengths.append(feedlineDepth);
    segmentLengths.append(chip_width/10);
   
    cursor.set(-chip_width/2, chip_height/4.);
    addFeedline(curCell, cursor, w_feed, g_feed, 4 , segmentLengths, directions);
   
    stringList directions;
    directions.append("r");    directions.append("u");    
    directions.append("r");   directions.append("d");
    directions.append("r");
  
    cursor.set(-chip_width/2, -chip_height/4.);
    addFeedline(curCell, cursor, w_feed, g_feed, 4, segmentLengths, directions);
   
    // Ground plane
    curCell->addBox(-chip_width/2, -chip_height/2, chip_width, chip_height, ground);
    
    int resonatorPositionsX = -chip_width/10;
    int resonatorPositionsY = -chip_height/4+feedlineDepth-w_feed/2-g_feed-x;  
    
    int j = 0;
    point cursor2;
    for (i=0; i<5; i+=2){
        cursor.set(resonatorPositionsX+chip_width/10*j, resonatorPositionsY);
        cursor2 = addResonator(curCell, cursor, w_res, g_res, 2904e3, (4-i)*tailLen/4, "d");
        cursor2 = addClaw(curCell, cursor2, "d");
        addXmon(curCell, cursor2, "d");

        
        cursor.set(resonatorPositionsX+chip_width/10*j, -resonatorPositionsY);
        cursor2 = addResonator(curCell, cursor, w_res, g_res, 2904e3+12e3*i, tailLen, "u");
        cursor2 = addClaw(curCell, cursor2, "u");
        addXmon(curCell, cursor2, "u");
        j++;
    }
    
    
    //layout->booleanTool->boolOnLayer(ground, protect, mask, "A-B", 0, 0, 0);
    //layout->booleanTool->boolOnLayer(M, mask, total, "A+B", 0, 0, 0);

    int hd;
    layout->backgroundTool->clearBackground();
    hd = layout->backgroundTool->addBackground("background.png");
    layout->backgroundTool->backgroundOffset(hd, -5682e3, 2950e3);
    layout->backgroundTool->backgroundScale(hd, 8.3e3, 8.3e3);
    
    
    
    
}
