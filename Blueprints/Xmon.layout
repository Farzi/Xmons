/*

    XMon qubit. Anchor point is on the protect of the arm towards the resonator.

*/

    int JJ_pads_len = 5.71e3;

point addXmon(cell* curCell, point anchorPoint, string direction, int w_JJ, int h_JJ) {

        int JJ_delta_arm_len = 8e3;
        int JJ_arm_len = arm_len/2+JJ_delta_arm_len;
        int ebeam_overlap = 3e3;
        point cursor;
        
    cursor.set(anchorPoint.x(), anchorPoint.y()-g_q);
    wire(curCell, protect, anchorPoint, "d", arm_len+2*g_q, w_q+2*g_q);
    wire(curCell, M, cursor, "d", arm_len/2+JJ_arm_len, w_q);

    cursor.set(cursor.x()-arm_len/2-g_q, cursor.y()-arm_len/2);
    wire(curCell, protect, cursor, "r", arm_len+2*g_q, w_q+2*g_q);
    cursor.set(cursor.x()+g_q, cursor.y());
    wire(curCell, M, cursor, "r", arm_len, w_q);
 //============ JJ pads ===========
   // =====  Top 
    cursor.set(cursor.x()+arm_len/2, cursor.y()-JJ_arm_len);
    point cursor2; cursor2.set(cursor.x(), cursor.y()+ebeam_overlap);

    
    wire(curCell, aux, cursor2, "d", JJ_pads_len+ebeam_overlap, 6e3);
    cursor2.set(cursor2.x()-2.5e3, cursor2.y()-JJ_pads_len-ebeam_overlap);
    wire(curCell, aux, cursor2, "d", 1e3, w_JJ);
    cursor2.set(cursor2.x()+2*2.5e3, cursor2.y());
    wire(curCell, aux, cursor2, "d", 1e3, w_JJ);
    
    
    // =====  Bottom
    cursor.set(cursor.x()-4e3, cursor.y()-g_q+JJ_delta_arm_len-ebeam_overlap);
    
    wire(curCell, aux, cursor, "u", JJ_pads_len+ebeam_overlap, 2e3);
    cursor.set(cursor.x()+2*4e3, cursor.y());
    wire(curCell, aux, cursor, "u", JJ_pads_len+ebeam_overlap, 2e3);
    cursor.set(cursor.x()-1e3, cursor.y()+ebeam_overlap+JJ_pads_len*0.9);
    wire(curCell, aux, cursor, "l", 1e3, h_JJ);
    cursor.set(cursor.x()-6e3, cursor.y());
    wire(curCell, aux, cursor, "r", 1e3, h_JJ);
    
 // ==== Merge aux structure to M1       
    layout->booleanTool->boolOnLayer(aux, aux, M1, "A+B", 0, 0, 2);
    curCell->deselectAll();
    curCell->selectLayer(aux);
    curCell->deleteSelect();
// ========Rotation =========
    rect selection;
    selection.set(anchorPoint.x() - g_q-w_q/2, anchorPoint.y()-2*g_q-arm_len-ebeam_overlap, 
                 anchorPoint.x()+g_q+w_q/2, anchorPoint.y());
    
    rotateSelection(curCell, selection, anchorPoint, direction);
    
    rect selection;
    selection.set(anchorPoint.x() - (arm_len/2+g_q), anchorPoint.y()-arm_len/2-g_q-w_q/2-g_q, 
                 anchorPoint.x()+(arm_len/2+g_q), anchorPoint.y()-arm_len/2-g_q+w_q/2+g_q);
    
    rotateSelection(curCell, selection, anchorPoint, direction);
    point retPoint;
    retPoint.set(0, -arm_len-2*g_q);
    return rotateVector(retPoint, anchorPoint, direction);
}
